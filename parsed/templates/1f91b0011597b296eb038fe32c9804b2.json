{
  "components/products/product-view-add-to-cart-js": "<script>\n    var context = JSON.parse({{ jsContext }})\n    let cartId = context.cartId;\n    var redirect = true\n    let cart = []\n    let graphqlQuery = {\n        query: `\n            mutation AddToCart($cartId: String!, $lineItems: [CartLineItemInput!]!) {\n                cart {\n                    addCartLineItems(\n                    input: {\n                        cartEntityId: $cartId\n                        data: {\n                            lineItems: $lineItems\n                        }\n                    }\n                    ) {\n                        cart {\n                            entityId\n                        }\n                    }\n                }\n            }`,\n            variables: {\n                cartId: cartId || '',\n                lineItems: []\n            }\n    };\n\n    var activecrum = document.querySelector('.breadcrumb.is-active span');\n    if (activecrum?.innerHTML?.length > 40) {\n        const [first, second, third, ...rest] = activecrum.innerHTML.split(' ')\n        activecrum.innerHTML = `${first} ${second} ${third}`\n    }\n\n    async function getCart() {\n        try {\n            const response = await fetch('/api/storefront/carts/', {\n                credentials: 'include'\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const cart = await response.json();\n            cartId = cart?.[0].id; // Update the cartId with the fetched cart ID\n            return cart\n        } catch (error) {\n            console.error('Error fetching cart:', error);\n            return null; // Return null in case of error\n        }\n    }\n\n\n    async function addItemsToCart(query) {\n        try {\n            const response = await fetch('/graphql', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${context.token}`\n                },\n                body: JSON.stringify(query)\n            });\n            const data = await response.json();\n            return data\n        } catch (error) {\n            console.error('Error adding items to cart:', error);\n            throw error;\n        }\n    }\n\n\n    const addToCartButton = document.querySelector('#form-action-addToCart');\n    addToCartButton.addEventListener('click', async (e) => {\n        const quantity = document.querySelector('.custom-increment-input')\n        let qty = parseInt(quantity.value)\n        console.log(cartId, qty, redirect, 'addToCart')\n        if(!cartId && qty > 1 && redirect){\n                graphqlQuery.variables.lineItems = [{productEntityId: context.productId, quantity: qty - 1}]\n                \n                setTimeout(async () => {\n                    if (!cartId) {\n                        cart = await getCart()\n                        graphqlQuery.variables.cartId = cart?.[0]?.id; // update payload\n                    }\n                    await addItemsToCart(graphqlQuery)\n        \n                    window.location.href = '/cart.php';\n                }, 2000)\n        }\n        else if(cartId && redirect){\n            e.stopPropagation()\n            e.preventDefault()\n            console.log(qty, 'else if')\n            graphqlQuery.variables.lineItems = [{productEntityId: context.productId, quantity: qty}]\n\n            await addItemsToCart(graphqlQuery)\n            window.location.href = '/cart.php';\n        }else{\n            setTimeout(()=>{\n                window.location.href = '/cart.php';\n            },1500)\n        }\n    });\n\n    const cartButton = document.querySelector('.navUser-item.navUser-item--cart');\n\n    function putSelectedKitInCart() {\n        const kits = document.querySelectorAll('.kit-item')\n        const checkedProduct = []\n        kits.forEach(kit => {\n            const input = kit.querySelector('input')\n            if (input.checked) {\n                checkedProduct.push({ productEntityId: parseInt(kit.dataset.productId), quantity: 1 })\n            }\n        })\n        return checkedProduct\n    }\n\n    async function kitAddToCart() {\n        const idsArray = putSelectedKitInCart()\n        // graphqlQuery.variables.cartId = cartId\n        graphqlQuery.variables.lineItems = idsArray\n        if (idsArray.length > 0) {\n            redirect = false\n          \n            const addToCart = document.getElementById('form-action-addToCart')\n\n            const cartQuantityElement = document.querySelector('.countPill.cart-quantity');\n            let newCart = false\n            const quantity = document.querySelector('.custom-increment-input')\n            if (!cartId) {\n                console.log(\"CartId is not present â€“ triggering native add to cart\");\n                addToCart?.click();\n                newCart = true\n                if(quantity.value > 1){\n                    graphqlQuery.variables.lineItems.push({ productEntityId: context.productId, quantity: parseInt(quantity.value - 1) })\n                }\n            } else {\n                cart = await getCart()\n                let productInCart = false\n                cart?.[0]?.lineItems?.physicalItems.forEach((item) => {\n                    if (item.productId === context.productId) {\n                        productInCart = true\n                    }\n                })\n\n                if (!productInCart) {\n                    graphqlQuery.variables.lineItems.push({ productEntityId: context.productId, quantity: parseInt(quantity.value) })\n                }\n            }\n\n            setTimeout(async () => {\n                if (newCart) {\n                    cart = await getCart()\n                    graphqlQuery.variables.cartId = cart?.[0]?.id; // update payload\n                }\n                await addItemsToCart(graphqlQuery)\n\n                const kits = document.querySelectorAll('.kit-item')\n                const checkedProduct = []\n                kits.forEach(kit => {\n                    const input = kit.querySelector('input')\n                    input.checked = false\n                })\n                document.querySelector('#self-kit-addtocart').value = 'Products Added To Cart';\n\n                setTimeout(() => {\n                    document.querySelector('#self-kit-addtocart').value = 'Add To Cart';\n                }, 3000);\n\n\n                cartQuantityElement.innerHTML = parseInt(cartQuantityElement.innerHTML) + graphqlQuery.variables.lineItems.length;\n\n                window.location.href = '/cart.php';\n            }, newCart ? 2000 : 0)\n\n        } else {\n            const errorDiv = document.querySelector('#self-kit-error')\n            errorDiv.style.display = 'block'\n            setTimeout(() => {\n                errorDiv.style.display = 'none'\n            }, 5000);\n        }\n    }\n\n    function tabsToggle() {\n        const tabs = document.querySelectorAll('.tab');\n        tabs.forEach(tab => {\n            tab.addEventListener('click', () => {\n                const isOpen = tab.className.includes('is-active')\n                tab.querySelector('.self-tab-icon').remove()\n                const span = document.createElement('span')\n                const a = tab.querySelector('a')\n                span.className = 'self-tab-icon'\n                if (isOpen) {\n                    tab.classList.remove('is-active')\n                    span.innerHTML = '<img class=\"plus-icon-img\" src=\"https://store-8xryzvxqo4.mybigcommerce.com/product_images/plus-icon.svg\" alt=\"plus icon\" />'\n                } else {\n                    tab.classList.add('is-active')\n                    span.innerHTML = '<img src=\"https://cdn11.bigcommerce.com/s-8xryzvxqo4/images/stencil/original/image-manager/img-1305.png?t=1751108673\" alt=\"minus icon\" width=\"15px\" />'\n                }\n                a.append(span)\n            })\n        })\n    }\n    // Add this JavaScript to your page\n    document.addEventListener('DOMContentLoaded', function () {\n        tabsToggle()\n\n        const bestPrice = document.querySelector(\".best-price\");\n\n        if (bestPrice) {\n            bestPrice.addEventListener(\"click\", function () {\n                // Only run in mobile view\n                if (window.innerWidth <= 480) {\n                    // Add class to show tooltip\n                    bestPrice.classList.add(\"active\");\n\n                    // Remove after 5 seconds\n                    setTimeout(() => {\n                        bestPrice.classList.remove(\"active\");\n                    }, 5000);\n                }\n            });\n        }\n    });\n</script>\n"
}